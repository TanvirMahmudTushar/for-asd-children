"use client"

import { useState, useEffect } from "react"
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card"
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { Textarea } from "@/components/ui/textarea"
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs"
import { BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer } from "recharts"

interface UserAnalytics {
  totalInteractions: number
  categoriesUsed: string[]
  favoriteCards: string[]
  categoryStats: Record<string, number>
  dailyActivity: Record<string, number>
  learningGoals: string[]
  lastActive: string
}

export function AdminPanel() {
  const [analytics, setAnalytics] = useState<UserAnalytics | null>(null)
  const [selectedUserId, setSelectedUserId] = useState("1")
  const [customContent, setCustomContent] = useState({
    type: "story",
    title: "",
    content: "",
  })

  useEffect(() => {
    fetchAnalytics()
  }, [selectedUserId])

  const fetchAnalytics = async () => {
    try {
      const response = await fetch(`/api/conversation?action=analytics&userId=${selectedUserId}`)
      const data = await response.json()
      setAnalytics(data.analytics)
    } catch (error) {
      console.error("Failed to fetch analytics:", error)
    }
  }

  const exportData = async () => {
    try {
      const response = await fetch(`/api/conversation?action=export&userId=${selectedUserId}`)
      const data = await response.json()

      const blob = new Blob([JSON.stringify(data.exportData, null, 2)], { type: "application/json" })
      const url = URL.createObjectURL(blob)
      const a = document.createElement("a")
      a.href = url
      a.download = `user-${selectedUserId}-data.json`
      a.click()
      URL.revokeObjectURL(url)
    } catch (error) {
      console.error("Failed to export data:", error)
    }
  }

  const createCustomContent = async () => {
    try {
      const response = await fetch("/api/content", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({
          action: "create_content",
          data: {
            type: customContent.type,
            title: customContent.title,
            content: JSON.parse(customContent.content || "{}"),
            createdBy: "admin",
          },
        }),
      })

      if (response.ok) {
        alert("‡¶ï‡¶æ‡¶∏‡ßç‡¶ü‡¶Æ ‡¶ï‡¶®‡ßç‡¶ü‡ßá‡¶®‡ßç‡¶ü ‡¶§‡ßà‡¶∞‡¶ø ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá!")
        setCustomContent({ type: "story", title: "", content: "" })
      }
    } catch (error) {
      console.error("Failed to create content:", error)
      alert("‡¶ï‡¶®‡ßç‡¶ü‡ßá‡¶®‡ßç‡¶ü ‡¶§‡ßà‡¶∞‡¶ø‡¶§‡ßá ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá")
    }
  }

  const chartData = analytics
    ? Object.entries(analytics.categoryStats).map(([category, count]) => ({
        category:
          category === "basic-needs"
            ? "‡¶Æ‡ßå‡¶≤‡¶ø‡¶ï ‡¶™‡ßç‡¶∞‡¶Ø‡¶º‡ßã‡¶ú‡¶®"
            : category === "emotions"
              ? "‡¶Ü‡¶¨‡ßá‡¶ó"
              : category === "activities"
                ? "‡¶ï‡¶æ‡¶∞‡ßç‡¶Ø‡¶ï‡ßç‡¶∞‡¶Æ"
                : category === "educational"
                  ? "‡¶∂‡¶ø‡¶ï‡ßç‡¶∑‡¶æ‡¶Æ‡ßÇ‡¶≤‡¶ï"
                  : category,
        interactions: count,
      }))
    : []

  return (
    <div className="max-w-6xl mx-auto p-6 space-y-6">
      <div className="text-center">
        <h1 className="text-3xl font-bold text-foreground mb-2">üîß ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶°‡¶Æ‡¶ø‡¶® ‡¶™‡ßç‡¶Ø‡¶æ‡¶®‡ßá‡¶≤</h1>
        <p className="text-muted-foreground">‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞‡¶ï‡¶æ‡¶∞‡ßÄ‡¶∞ ‡¶Ö‡¶ó‡ßç‡¶∞‡¶ó‡¶§‡¶ø ‡¶è‡¶¨‡¶Ç ‡¶∏‡¶ø‡¶∏‡ßç‡¶ü‡ßá‡¶Æ ‡¶¨‡ßç‡¶Ø‡¶¨‡¶∏‡ßç‡¶•‡¶æ‡¶™‡¶®‡¶æ</p>
      </div>

      <Tabs defaultValue="analytics" className="w-full">
        <TabsList className="grid w-full grid-cols-3">
          <TabsTrigger value="analytics">‡¶¨‡¶ø‡¶∂‡ßç‡¶≤‡ßá‡¶∑‡¶£</TabsTrigger>
          <TabsTrigger value="content">‡¶ï‡¶æ‡¶∏‡ßç‡¶ü‡¶Æ ‡¶ï‡¶®‡ßç‡¶ü‡ßá‡¶®‡ßç‡¶ü</TabsTrigger>
          <TabsTrigger value="settings">‡¶∏‡ßá‡¶ü‡¶ø‡¶Ç‡¶∏</TabsTrigger>
        </TabsList>

        <TabsContent value="analytics" className="space-y-6">
          <Card>
            <CardHeader>
              <CardTitle>‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞‡¶ï‡¶æ‡¶∞‡ßÄ ‡¶®‡¶ø‡¶∞‡ßç‡¶¨‡¶æ‡¶ö‡¶®</CardTitle>
            </CardHeader>
            <CardContent>
              <div className="flex gap-4 items-center">
                <Input
                  placeholder="‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞‡¶ï‡¶æ‡¶∞‡ßÄ ID"
                  value={selectedUserId}
                  onChange={(e) => setSelectedUserId(e.target.value)}
                  className="max-w-xs"
                />
                <Button onClick={fetchAnalytics}>‡¶¨‡¶ø‡¶∂‡ßç‡¶≤‡ßá‡¶∑‡¶£ ‡¶≤‡ßã‡¶° ‡¶ï‡¶∞‡ßÅ‡¶®</Button>
                <Button onClick={exportData} variant="outline">
                  ‡¶°‡ßá‡¶ü‡¶æ ‡¶è‡¶ï‡ßç‡¶∏‡¶™‡ßã‡¶∞‡ßç‡¶ü
                </Button>
              </div>
            </CardContent>
          </Card>

          {analytics && (
            <>
              <div className="grid grid-cols-1 md:grid-cols-4 gap-4">
                <Card>
                  <CardContent className="p-6">
                    <div className="text-2xl font-bold text-primary">{analytics.totalInteractions}</div>
                    <p className="text-sm text-muted-foreground">‡¶Æ‡ßã‡¶ü ‡¶á‡¶®‡ßç‡¶ü‡¶æ‡¶∞‡¶Ö‡ßç‡¶Ø‡¶æ‡¶ï‡¶∂‡¶®</p>
                  </CardContent>
                </Card>
                <Card>
                  <CardContent className="p-6">
                    <div className="text-2xl font-bold text-primary">{analytics.categoriesUsed.length}</div>
                    <p className="text-sm text-muted-foreground">‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡ßÉ‡¶§ ‡¶¨‡¶ø‡¶≠‡¶æ‡¶ó</p>
                  </CardContent>
                </Card>
                <Card>
                  <CardContent className="p-6">
                    <div className="text-2xl font-bold text-primary">{analytics.favoriteCards.length}</div>
                    <p className="text-sm text-muted-foreground">‡¶™‡ßç‡¶∞‡¶ø‡¶Ø‡¶º ‡¶ï‡¶æ‡¶∞‡ßç‡¶°</p>
                  </CardContent>
                </Card>
                <Card>
                  <CardContent className="p-6">
                    <div className="text-2xl font-bold text-primary">{analytics.learningGoals.length}</div>
                    <p className="text-sm text-muted-foreground">‡¶∂‡ßá‡¶ñ‡¶æ‡¶∞ ‡¶≤‡¶ï‡ßç‡¶∑‡ßç‡¶Ø</p>
                  </CardContent>
                </Card>
              </div>

              <Card>
                <CardHeader>
                  <CardTitle>‡¶¨‡¶ø‡¶≠‡¶æ‡¶ó ‡¶Ö‡¶®‡ßÅ‡¶Ø‡¶æ‡¶Ø‡¶º‡ßÄ ‡¶á‡¶®‡ßç‡¶ü‡¶æ‡¶∞‡¶Ö‡ßç‡¶Ø‡¶æ‡¶ï‡¶∂‡¶®</CardTitle>
                </CardHeader>
                <CardContent>
                  <ResponsiveContainer width="100%" height={300}>
                    <BarChart data={chartData}>
                      <CartesianGrid strokeDasharray="3 3" />
                      <XAxis dataKey="category" />
                      <YAxis />
                      <Tooltip />
                      <Bar dataKey="interactions" fill="#d97706" />
                    </BarChart>
                  </ResponsiveContainer>
                </CardContent>
              </Card>

              <Card>
                <CardHeader>
                  <CardTitle>‡¶™‡ßç‡¶∞‡¶ø‡¶Ø‡¶º ‡¶ï‡¶æ‡¶∞‡ßç‡¶°‡¶∏‡¶Æ‡ßÇ‡¶π</CardTitle>
                </CardHeader>
                <CardContent>
                  <div className="flex flex-wrap gap-2">
                    {analytics.favoriteCards.map((card, index) => (
                      <span key={index} className="bg-primary/10 text-primary px-3 py-1 rounded-full text-sm">
                        {card}
                      </span>
                    ))}
                  </div>
                </CardContent>
              </Card>
            </>
          )}
        </TabsContent>

        <TabsContent value="content" className="space-y-6">
          <Card>
            <CardHeader>
              <CardTitle>‡¶®‡¶§‡ßÅ‡¶® ‡¶ï‡¶æ‡¶∏‡ßç‡¶ü‡¶Æ ‡¶ï‡¶®‡ßç‡¶ü‡ßá‡¶®‡ßç‡¶ü ‡¶§‡ßà‡¶∞‡¶ø ‡¶ï‡¶∞‡ßÅ‡¶®</CardTitle>
            </CardHeader>
            <CardContent className="space-y-4">
              <div>
                <label className="block text-sm font-medium mb-2">‡¶ï‡¶®‡ßç‡¶ü‡ßá‡¶®‡ßç‡¶ü ‡¶ü‡¶æ‡¶á‡¶™</label>
                <select
                  value={customContent.type}
                  onChange={(e) => setCustomContent({ ...customContent, type: e.target.value })}
                  className="w-full p-2 border rounded-md"
                >
                  <option value="story">‡¶ó‡¶≤‡ßç‡¶™</option>
                  <option value="card">‡¶ï‡¶æ‡¶∞‡ßç‡¶°</option>
                  <option value="activity">‡¶ï‡¶æ‡¶∞‡ßç‡¶Ø‡¶ï‡ßç‡¶∞‡¶Æ</option>
                </select>
              </div>

              <div>
                <label className="block text-sm font-medium mb-2">‡¶∂‡¶ø‡¶∞‡ßã‡¶®‡¶æ‡¶Æ</label>
                <Input
                  value={customContent.title}
                  onChange={(e) => setCustomContent({ ...customContent, title: e.target.value })}
                  placeholder="‡¶ï‡¶®‡ßç‡¶ü‡ßá‡¶®‡ßç‡¶ü‡ßá‡¶∞ ‡¶∂‡¶ø‡¶∞‡ßã‡¶®‡¶æ‡¶Æ ‡¶≤‡¶ø‡¶ñ‡ßÅ‡¶®"
                />
              </div>

              <div>
                <label className="block text-sm font-medium mb-2">‡¶ï‡¶®‡ßç‡¶ü‡ßá‡¶®‡ßç‡¶ü (JSON ‡¶´‡¶∞‡¶Æ‡ßç‡¶Ø‡¶æ‡¶ü)</label>
                <Textarea
                  value={customContent.content}
                  onChange={(e) => setCustomContent({ ...customContent, content: e.target.value })}
                  placeholder='{"slides": [{"text": "‡¶ó‡¶≤‡ßç‡¶™‡ßá‡¶∞ ‡¶Ö‡¶Ç‡¶∂", "image": "/image.jpg"}]}'
                  rows={6}
                />
              </div>

              <Button onClick={createCustomContent} className="w-full">
                ‡¶ï‡¶®‡ßç‡¶ü‡ßá‡¶®‡ßç‡¶ü ‡¶§‡ßà‡¶∞‡¶ø ‡¶ï‡¶∞‡ßÅ‡¶®
              </Button>
            </CardContent>
          </Card>
        </TabsContent>

        <TabsContent value="settings" className="space-y-6">
          <Card>
            <CardHeader>
              <CardTitle>‡¶∏‡¶ø‡¶∏‡ßç‡¶ü‡ßá‡¶Æ ‡¶∏‡ßá‡¶ü‡¶ø‡¶Ç‡¶∏</CardTitle>
            </CardHeader>
            <CardContent className="space-y-4">
              <div className="space-y-2">
                <h3 className="font-medium">‡¶≠‡¶Ø‡¶º‡ßá‡¶∏ ‡¶∏‡ßá‡¶ü‡¶ø‡¶Ç‡¶∏</h3>
                <div className="grid grid-cols-2 gap-4">
                  <div>
                    <label className="block text-sm mb-1">‡¶ï‡¶•‡¶æ‡¶∞ ‡¶ó‡¶§‡¶ø</label>
                    <Input type="range" min="0.5" max="2" step="0.1" defaultValue="0.8" />
                  </div>
                  <div>
                    <label className="block text-sm mb-1">‡¶≠‡¶≤‡¶ø‡¶â‡¶Æ</label>
                    <Input type="range" min="0" max="1" step="0.1" defaultValue="1" />
                  </div>
                </div>
              </div>

              <div className="space-y-2">
                <h3 className="font-medium">‡¶á‡¶®‡ßç‡¶ü‡¶æ‡¶∞‡¶´‡ßá‡¶∏ ‡¶∏‡ßá‡¶ü‡¶ø‡¶Ç‡¶∏</h3>
                <div className="space-y-2">
                  <label className="flex items-center space-x-2">
                    <input type="checkbox" defaultChecked />
                    <span>‡¶Ö‡¶ü‡ßã-‡¶™‡ßç‡¶≤‡ßá ‡¶ó‡¶≤‡ßç‡¶™</span>
                  </label>
                  <label className="flex items-center space-x-2">
                    <input type="checkbox" defaultChecked />
                    <span>‡¶ï‡¶æ‡¶∞‡ßç‡¶° ‡¶ï‡ßç‡¶≤‡¶ø‡¶ï‡ßá ‡¶∏‡¶æ‡¶â‡¶®‡ßç‡¶°</span>
                  </label>
                  <label className="flex items-center space-x-2">
                    <input type="checkbox" />
                    <span>‡¶°‡¶æ‡¶∞‡ßç‡¶ï ‡¶Æ‡ßã‡¶°</span>
                  </label>
                </div>
              </div>

              <Button className="w-full">‡¶∏‡ßá‡¶ü‡¶ø‡¶Ç‡¶∏ ‡¶∏‡¶Ç‡¶∞‡¶ï‡ßç‡¶∑‡¶£ ‡¶ï‡¶∞‡ßÅ‡¶®</Button>
            </CardContent>
          </Card>
        </TabsContent>
      </Tabs>
    </div>
  )
}
